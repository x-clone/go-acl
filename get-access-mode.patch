diff --git a/api/acl.go b/api/acl.go
index e0b532b..1bd7040 100644
--- a/api/acl.go
+++ b/api/acl.go
@@ -61,7 +61,9 @@ const (
 )
 
 var (
-	procSetEntriesInAclW = advapi32.MustFindProc("SetEntriesInAclW")
+	procSetEntriesInAclW           = advapi32.MustFindProc("SetEntriesInAclW")
+	procGetEffectiveRightsFromAclW = advapi32.MustFindProc("GetEffectiveRightsFromAclW")
+	procGetExplicitEntriesFromAclW = advapi32.MustFindProc("GetExplicitEntriesFromAclW")
 )
 
 // https://msdn.microsoft.com/en-us/library/windows/desktop/aa379636.aspx
@@ -94,3 +96,63 @@ func SetEntriesInAcl(entries []ExplicitAccess, oldAcl windows.Handle, newAcl *wi
 	}
 	return nil
 }
+
+func GetEffectiveRightsFromAcl(oldAcl windows.Handle, sid *windows.SID) (uint32, error) {
+	trustee := Trustee{
+		TrusteeForm: TRUSTEE_IS_SID,
+		Name:        (*uint16)(unsafe.Pointer(sid)),
+	}
+
+	var rights uint32
+
+	ret, _, err := procGetEffectiveRightsFromAclW.Call(
+		uintptr(oldAcl),
+		uintptr(unsafe.Pointer(&trustee)),
+		uintptr(unsafe.Pointer(&rights)),
+	)
+
+	if ret != 0 {
+		return 0, err
+	}
+	return rights, nil
+}
+
+func GetExplicitEntriesFromAcl(oldAcl windows.Handle) ([]ExplicitAccess, error) {
+	var (
+		count uint32
+		list  uintptr
+	)
+
+	/* TODO: seems like I ought to be able to something like this:
+	     var entries *[]ExplicitAccess
+	     ret, _, err := procGetExplicitEntriesFromAclW.Call(
+	         ...,
+	         uintptr(unsafe.Pointer(&entries)),
+	     )
+	   but I couldn't figure out how to make it work.  I tried a whole
+	   bunch of different combinations but I only ever managed to get an empty list
+	*/
+	ret, _, err := procGetExplicitEntriesFromAclW.Call(
+		uintptr(oldAcl),
+		uintptr(unsafe.Pointer(&count)),
+		uintptr(unsafe.Pointer(&list)),
+	)
+
+	if ret != 0 {
+		return []ExplicitAccess{}, err
+	}
+
+	defer windows.LocalFree(windows.Handle(unsafe.Pointer(list)))
+
+	explicitAccessSize := unsafe.Sizeof(ExplicitAccess{})
+	getEntryAtOffset := func(list uintptr, offset uint32) ExplicitAccess {
+		return *(*ExplicitAccess)(unsafe.Pointer(list + explicitAccessSize*uintptr(offset)))
+	}
+
+	output := make([]ExplicitAccess, count)
+	for i := uint32(0); i < count; i++ {
+		output[i] = getEntryAtOffset(list, i)
+	}
+
+	return output, nil
+}
diff --git a/chmod.go b/chmod.go
index 0d7c6c6..d80f669 100644
--- a/chmod.go
+++ b/chmod.go
@@ -11,15 +11,15 @@ import (
 // file's group, and everyone else to be explicitly controlled.
 func Chmod(name string, fileMode os.FileMode) error {
 	// https://support.microsoft.com/en-us/help/243330/well-known-security-identifiers-in-windows-operating-systems
-	creatorOwnerSID, err := windows.StringToSid("S-1-3-0")
+	creatorOwnerSID, err := windows.StringToSid(SID_NAME_CREATOR_OWNER)
 	if err != nil {
 		return err
 	}
-	creatorGroupSID, err := windows.StringToSid("S-1-3-1")
+	creatorGroupSID, err := windows.StringToSid(SID_NAME_CREATOR_GROUP)
 	if err != nil {
 		return err
 	}
-	everyoneSID, err := windows.StringToSid("S-1-1-0")
+	everyoneSID, err := windows.StringToSid(SID_NAME_EVERYONE)
 	if err != nil {
 		return err
 	}
@@ -29,8 +29,9 @@ func Chmod(name string, fileMode os.FileMode) error {
 		name,
 		true,
 		false,
-		GrantSid(((mode&0700)<<23)|((mode&0200)<<9), creatorOwnerSID),
-		GrantSid(((mode&0070)<<26)|((mode&0020)<<12), creatorGroupSID),
-		GrantSid(((mode&0007)<<29)|((mode&0002)<<15), everyoneSID),
+		// explicitly granting SYNCHRONIZE allows later detection of when a 0 mode was specified
+		GrantSid(((mode&0700)<<23)|((mode&0200)<<9)|SYNCHRONIZE, creatorOwnerSID),
+		GrantSid(((mode&0070)<<26)|((mode&0020)<<12)|SYNCHRONIZE, creatorGroupSID),
+		GrantSid(((mode&0007)<<29)|((mode&0002)<<15)|SYNCHRONIZE, everyoneSID),
 	)
 }
